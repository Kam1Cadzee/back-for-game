# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregateEntity {
  count(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): Int!
}

type AggregateIrrverb {
  count(after: IrrverbWhereUniqueInput, before: IrrverbWhereUniqueInput, first: Int, last: Int, orderBy: IrrverbOrderByInput, skip: Int, where: IrrverbWhereInput): Int!
}

type AggregateMobileApp {
  count(after: MobileAppWhereUniqueInput, before: MobileAppWhereUniqueInput, first: Int, last: Int, orderBy: MobileAppOrderByInput, skip: Int, where: MobileAppWhereInput): Int!
}

type AggregatePartOfSpeechDesc {
  count(after: PartOfSpeechDescWhereUniqueInput, before: PartOfSpeechDescWhereUniqueInput, first: Int, last: Int, orderBy: PartOfSpeechDescOrderByInput, skip: Int, where: PartOfSpeechDescWhereInput): Int!
}

type AggregatePhrase {
  count(after: PhraseWhereUniqueInput, before: PhraseWhereUniqueInput, first: Int, last: Int, orderBy: PhraseOrderByInput, skip: Int, where: PhraseWhereInput): Int!
}

type AggregateSentence {
  count(after: SentenceWhereUniqueInput, before: SentenceWhereUniqueInput, first: Int, last: Int, orderBy: SentenceOrderByInput, skip: Int, where: SentenceWhereInput): Int!
}

type AggregateSettingRole {
  count(after: SettingRoleWhereUniqueInput, before: SettingRoleWhereUniqueInput, first: Int, last: Int, orderBy: SettingRoleOrderByInput, skip: Int, where: SettingRoleWhereInput): Int!
}

type AggregateTranslate {
  count(after: TranslateWhereUniqueInput, before: TranslateWhereUniqueInput, first: Int, last: Int, orderBy: TranslateOrderByInput, skip: Int, where: TranslateWhereInput): Int!
}

type AggregateUser {
  count(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): Int!
}

type AggregateWord {
  count(after: WordWhereUniqueInput, before: WordWhereUniqueInput, first: Int, last: Int, orderBy: WordOrderByInput, skip: Int, where: WordWhereInput): Int!
}

input AnotherUser_firstname_lastname_keyCompoundUniqueInput {
  en: String!
  userId: Int!
}

type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input CreateTranslateInput {
  idWord: Float!
  translation: TranslationInput!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Entity {
  createdAt: DateTime!
  disconnectPhrases(after: PhraseWhereUniqueInput, before: PhraseWhereUniqueInput, first: Int, last: Int, orderBy: PhraseOrderByInput, skip: Int, where: PhraseWhereInput): [Phrase!]
  disconnectSentences(after: SentenceWhereUniqueInput, before: SentenceWhereUniqueInput, first: Int, last: Int, orderBy: SentenceOrderByInput, skip: Int, where: SentenceWhereInput): [Sentence!]
  disconnectWords(after: WordWhereUniqueInput, before: WordWhereUniqueInput, first: Int, last: Int, orderBy: WordOrderByInput, skip: Int, where: WordWhereInput): [Word!]
  id: Int!
  irrverb: Irrverb
  irrverbId: Int
  isCreate: Boolean!
  isNeededEdit: Boolean!
  phrases(after: PhraseWhereUniqueInput, before: PhraseWhereUniqueInput, first: Int, last: Int, orderBy: PhraseOrderByInput, skip: Int, where: PhraseWhereInput): [Phrase!]
  sentences(after: SentenceWhereUniqueInput, before: SentenceWhereUniqueInput, first: Int, last: Int, orderBy: SentenceOrderByInput, skip: Int, where: SentenceWhereInput): [Sentence!]
  title: String!
  updatedAt: DateTime!
  User: User!
  userId: Int!
  words(after: WordWhereUniqueInput, before: WordWhereUniqueInput, first: Int, last: Int, orderBy: WordOrderByInput, skip: Int, where: WordWhereInput): [Word!]
}

input EntityCreateInput {
  createdAt: DateTime
  disconnectPhrases: PhraseCreateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceCreateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordCreateManyWithoutDisconnectEntitiesInput
  irrverb: IrrverbCreateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseCreateManyWithoutEntitiesInput
  sentences: SentenceCreateManyWithoutEntitiesInput
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutEntitiesInput!
  words: WordCreateManyWithoutEntitiesInput
}

input EntityCreateManyWithoutDisconnectPhrasesInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutDisconnectPhrasesInput!]
}

input EntityCreateManyWithoutDisconnectSentencesInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutDisconnectSentencesInput!]
}

input EntityCreateManyWithoutDisconnectWordsInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutDisconnectWordsInput!]
}

input EntityCreateManyWithoutIrrverbInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutIrrverbInput!]
}

input EntityCreateManyWithoutPhrasesInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutPhrasesInput!]
}

input EntityCreateManyWithoutSentencesInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutSentencesInput!]
}

input EntityCreateManyWithoutUserInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutUserInput!]
}

input EntityCreateManyWithoutWordsInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutWordsInput!]
}

input EntityCreateWithoutDisconnectPhrasesInput {
  createdAt: DateTime
  disconnectSentences: SentenceCreateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordCreateManyWithoutDisconnectEntitiesInput
  irrverb: IrrverbCreateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseCreateManyWithoutEntitiesInput
  sentences: SentenceCreateManyWithoutEntitiesInput
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutEntitiesInput!
  words: WordCreateManyWithoutEntitiesInput
}

input EntityCreateWithoutDisconnectSentencesInput {
  createdAt: DateTime
  disconnectPhrases: PhraseCreateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordCreateManyWithoutDisconnectEntitiesInput
  irrverb: IrrverbCreateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseCreateManyWithoutEntitiesInput
  sentences: SentenceCreateManyWithoutEntitiesInput
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutEntitiesInput!
  words: WordCreateManyWithoutEntitiesInput
}

input EntityCreateWithoutDisconnectWordsInput {
  createdAt: DateTime
  disconnectPhrases: PhraseCreateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceCreateManyWithoutDisconnectEntitiesInput
  irrverb: IrrverbCreateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseCreateManyWithoutEntitiesInput
  sentences: SentenceCreateManyWithoutEntitiesInput
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutEntitiesInput!
  words: WordCreateManyWithoutEntitiesInput
}

input EntityCreateWithoutIrrverbInput {
  createdAt: DateTime
  disconnectPhrases: PhraseCreateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceCreateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordCreateManyWithoutDisconnectEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseCreateManyWithoutEntitiesInput
  sentences: SentenceCreateManyWithoutEntitiesInput
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutEntitiesInput!
  words: WordCreateManyWithoutEntitiesInput
}

input EntityCreateWithoutPhrasesInput {
  createdAt: DateTime
  disconnectPhrases: PhraseCreateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceCreateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordCreateManyWithoutDisconnectEntitiesInput
  irrverb: IrrverbCreateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  sentences: SentenceCreateManyWithoutEntitiesInput
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutEntitiesInput!
  words: WordCreateManyWithoutEntitiesInput
}

input EntityCreateWithoutSentencesInput {
  createdAt: DateTime
  disconnectPhrases: PhraseCreateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceCreateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordCreateManyWithoutDisconnectEntitiesInput
  irrverb: IrrverbCreateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseCreateManyWithoutEntitiesInput
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutEntitiesInput!
  words: WordCreateManyWithoutEntitiesInput
}

input EntityCreateWithoutUserInput {
  createdAt: DateTime
  disconnectPhrases: PhraseCreateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceCreateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordCreateManyWithoutDisconnectEntitiesInput
  irrverb: IrrverbCreateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseCreateManyWithoutEntitiesInput
  sentences: SentenceCreateManyWithoutEntitiesInput
  title: String!
  updatedAt: DateTime
  words: WordCreateManyWithoutEntitiesInput
}

input EntityCreateWithoutWordsInput {
  createdAt: DateTime
  disconnectPhrases: PhraseCreateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceCreateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordCreateManyWithoutDisconnectEntitiesInput
  irrverb: IrrverbCreateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseCreateManyWithoutEntitiesInput
  sentences: SentenceCreateManyWithoutEntitiesInput
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutEntitiesInput!
}

input EntityFilter {
  every: EntityWhereInput
  none: EntityWhereInput
  some: EntityWhereInput
}

input EntityOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  irrverbId: OrderByArg
  isCreate: OrderByArg
  isNeededEdit: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
  userId: OrderByArg
}

input EntityScalarWhereInput {
  AND: [EntityScalarWhereInput!]
  createdAt: DateTimeFilter
  disconnectPhrases: PhraseFilter
  disconnectSentences: SentenceFilter
  disconnectWords: WordFilter
  id: IntFilter
  irrverbId: NullableIntFilter
  isCreate: BooleanFilter
  isNeededEdit: BooleanFilter
  NOT: [EntityScalarWhereInput!]
  OR: [EntityScalarWhereInput!]
  phrases: PhraseFilter
  sentences: SentenceFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
  words: WordFilter
}

input EntityUpdateInput {
  createdAt: DateTime
  disconnectPhrases: PhraseUpdateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceUpdateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordUpdateManyWithoutDisconnectEntitiesInput
  id: Int
  irrverb: IrrverbUpdateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseUpdateManyWithoutEntitiesInput
  sentences: SentenceUpdateManyWithoutEntitiesInput
  title: String
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutEntitiesInput
  words: WordUpdateManyWithoutEntitiesInput
}

input EntityUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  isCreate: Boolean
  isNeededEdit: Boolean
  title: String
  updatedAt: DateTime
}

input EntityUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  isCreate: Boolean
  isNeededEdit: Boolean
  title: String
  updatedAt: DateTime
}

input EntityUpdateManyWithoutDisconnectPhrasesInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutDisconnectPhrasesInput!]
  delete: [EntityWhereUniqueInput!]
  deleteMany: [EntityScalarWhereInput!]
  disconnect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutDisconnectPhrasesInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutDisconnectPhrasesInput!]
}

input EntityUpdateManyWithoutDisconnectSentencesInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutDisconnectSentencesInput!]
  delete: [EntityWhereUniqueInput!]
  deleteMany: [EntityScalarWhereInput!]
  disconnect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutDisconnectSentencesInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutDisconnectSentencesInput!]
}

input EntityUpdateManyWithoutDisconnectWordsInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutDisconnectWordsInput!]
  delete: [EntityWhereUniqueInput!]
  deleteMany: [EntityScalarWhereInput!]
  disconnect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutDisconnectWordsInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutDisconnectWordsInput!]
}

input EntityUpdateManyWithoutIrrverbInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutIrrverbInput!]
  delete: [EntityWhereUniqueInput!]
  deleteMany: [EntityScalarWhereInput!]
  disconnect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutIrrverbInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutIrrverbInput!]
}

input EntityUpdateManyWithoutPhrasesInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutPhrasesInput!]
  delete: [EntityWhereUniqueInput!]
  deleteMany: [EntityScalarWhereInput!]
  disconnect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutPhrasesInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutPhrasesInput!]
}

input EntityUpdateManyWithoutSentencesInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutSentencesInput!]
  delete: [EntityWhereUniqueInput!]
  deleteMany: [EntityScalarWhereInput!]
  disconnect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutSentencesInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutSentencesInput!]
}

input EntityUpdateManyWithoutUserInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutUserInput!]
  delete: [EntityWhereUniqueInput!]
  deleteMany: [EntityScalarWhereInput!]
  disconnect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutUserInput!]
}

input EntityUpdateManyWithoutWordsInput {
  connect: [EntityWhereUniqueInput!]
  create: [EntityCreateWithoutWordsInput!]
  delete: [EntityWhereUniqueInput!]
  deleteMany: [EntityScalarWhereInput!]
  disconnect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutWordsInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutWordsInput!]
}

input EntityUpdateManyWithWhereNestedInput {
  data: EntityUpdateManyDataInput!
  where: EntityScalarWhereInput!
}

input EntityUpdateWithoutDisconnectPhrasesDataInput {
  createdAt: DateTime
  disconnectSentences: SentenceUpdateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordUpdateManyWithoutDisconnectEntitiesInput
  id: Int
  irrverb: IrrverbUpdateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseUpdateManyWithoutEntitiesInput
  sentences: SentenceUpdateManyWithoutEntitiesInput
  title: String
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutEntitiesInput
  words: WordUpdateManyWithoutEntitiesInput
}

input EntityUpdateWithoutDisconnectSentencesDataInput {
  createdAt: DateTime
  disconnectPhrases: PhraseUpdateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordUpdateManyWithoutDisconnectEntitiesInput
  id: Int
  irrverb: IrrverbUpdateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseUpdateManyWithoutEntitiesInput
  sentences: SentenceUpdateManyWithoutEntitiesInput
  title: String
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutEntitiesInput
  words: WordUpdateManyWithoutEntitiesInput
}

input EntityUpdateWithoutDisconnectWordsDataInput {
  createdAt: DateTime
  disconnectPhrases: PhraseUpdateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceUpdateManyWithoutDisconnectEntitiesInput
  id: Int
  irrverb: IrrverbUpdateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseUpdateManyWithoutEntitiesInput
  sentences: SentenceUpdateManyWithoutEntitiesInput
  title: String
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutEntitiesInput
  words: WordUpdateManyWithoutEntitiesInput
}

input EntityUpdateWithoutIrrverbDataInput {
  createdAt: DateTime
  disconnectPhrases: PhraseUpdateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceUpdateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordUpdateManyWithoutDisconnectEntitiesInput
  id: Int
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseUpdateManyWithoutEntitiesInput
  sentences: SentenceUpdateManyWithoutEntitiesInput
  title: String
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutEntitiesInput
  words: WordUpdateManyWithoutEntitiesInput
}

input EntityUpdateWithoutPhrasesDataInput {
  createdAt: DateTime
  disconnectPhrases: PhraseUpdateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceUpdateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordUpdateManyWithoutDisconnectEntitiesInput
  id: Int
  irrverb: IrrverbUpdateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  sentences: SentenceUpdateManyWithoutEntitiesInput
  title: String
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutEntitiesInput
  words: WordUpdateManyWithoutEntitiesInput
}

input EntityUpdateWithoutSentencesDataInput {
  createdAt: DateTime
  disconnectPhrases: PhraseUpdateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceUpdateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordUpdateManyWithoutDisconnectEntitiesInput
  id: Int
  irrverb: IrrverbUpdateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseUpdateManyWithoutEntitiesInput
  title: String
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutEntitiesInput
  words: WordUpdateManyWithoutEntitiesInput
}

input EntityUpdateWithoutUserDataInput {
  createdAt: DateTime
  disconnectPhrases: PhraseUpdateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceUpdateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordUpdateManyWithoutDisconnectEntitiesInput
  id: Int
  irrverb: IrrverbUpdateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseUpdateManyWithoutEntitiesInput
  sentences: SentenceUpdateManyWithoutEntitiesInput
  title: String
  updatedAt: DateTime
  words: WordUpdateManyWithoutEntitiesInput
}

input EntityUpdateWithoutWordsDataInput {
  createdAt: DateTime
  disconnectPhrases: PhraseUpdateManyWithoutDisconnectEntitiesInput
  disconnectSentences: SentenceUpdateManyWithoutDisconnectEntitiesInput
  disconnectWords: WordUpdateManyWithoutDisconnectEntitiesInput
  id: Int
  irrverb: IrrverbUpdateOneWithoutEntitiesInput
  isCreate: Boolean
  isNeededEdit: Boolean
  phrases: PhraseUpdateManyWithoutEntitiesInput
  sentences: SentenceUpdateManyWithoutEntitiesInput
  title: String
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutEntitiesInput
}

input EntityUpdateWithWhereUniqueWithoutDisconnectPhrasesInput {
  data: EntityUpdateWithoutDisconnectPhrasesDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpdateWithWhereUniqueWithoutDisconnectSentencesInput {
  data: EntityUpdateWithoutDisconnectSentencesDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpdateWithWhereUniqueWithoutDisconnectWordsInput {
  data: EntityUpdateWithoutDisconnectWordsDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpdateWithWhereUniqueWithoutIrrverbInput {
  data: EntityUpdateWithoutIrrverbDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpdateWithWhereUniqueWithoutPhrasesInput {
  data: EntityUpdateWithoutPhrasesDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpdateWithWhereUniqueWithoutSentencesInput {
  data: EntityUpdateWithoutSentencesDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpdateWithWhereUniqueWithoutUserInput {
  data: EntityUpdateWithoutUserDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpdateWithWhereUniqueWithoutWordsInput {
  data: EntityUpdateWithoutWordsDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpsertWithWhereUniqueWithoutDisconnectPhrasesInput {
  create: EntityCreateWithoutDisconnectPhrasesInput!
  update: EntityUpdateWithoutDisconnectPhrasesDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpsertWithWhereUniqueWithoutDisconnectSentencesInput {
  create: EntityCreateWithoutDisconnectSentencesInput!
  update: EntityUpdateWithoutDisconnectSentencesDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpsertWithWhereUniqueWithoutDisconnectWordsInput {
  create: EntityCreateWithoutDisconnectWordsInput!
  update: EntityUpdateWithoutDisconnectWordsDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpsertWithWhereUniqueWithoutIrrverbInput {
  create: EntityCreateWithoutIrrverbInput!
  update: EntityUpdateWithoutIrrverbDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpsertWithWhereUniqueWithoutPhrasesInput {
  create: EntityCreateWithoutPhrasesInput!
  update: EntityUpdateWithoutPhrasesDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpsertWithWhereUniqueWithoutSentencesInput {
  create: EntityCreateWithoutSentencesInput!
  update: EntityUpdateWithoutSentencesDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpsertWithWhereUniqueWithoutUserInput {
  create: EntityCreateWithoutUserInput!
  update: EntityUpdateWithoutUserDataInput!
  where: EntityWhereUniqueInput!
}

input EntityUpsertWithWhereUniqueWithoutWordsInput {
  create: EntityCreateWithoutWordsInput!
  update: EntityUpdateWithoutWordsDataInput!
  where: EntityWhereUniqueInput!
}

input EntityWhereInput {
  AND: [EntityWhereInput!]
  createdAt: DateTimeFilter
  disconnectPhrases: PhraseFilter
  disconnectSentences: SentenceFilter
  disconnectWords: WordFilter
  id: IntFilter
  irrverb: IrrverbWhereInput
  irrverbId: NullableIntFilter
  isCreate: BooleanFilter
  isNeededEdit: BooleanFilter
  NOT: [EntityWhereInput!]
  OR: [EntityWhereInput!]
  phrases: PhraseFilter
  sentences: SentenceFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  User: UserWhereInput
  userId: IntFilter
  words: WordFilter
}

input EntityWhereUniqueInput {
  id: Int
  unique_title_userId: Unique_title_userIdCompoundUniqueInput
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Irrverb {
  entities(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): [Entity!]
  form1EN: String!
  form2EN: String!
  form3EN: String!
  id: Int!
  ru: String!
}

input IrrverbCreateInput {
  entities: EntityCreateManyWithoutIrrverbInput
  form1EN: String!
  form2EN: String!
  form3EN: String!
  ru: String!
}

input IrrverbCreateOneWithoutEntitiesInput {
  connect: IrrverbWhereUniqueInput
  create: IrrverbCreateWithoutEntitiesInput
}

input IrrverbCreateWithoutEntitiesInput {
  form1EN: String!
  form2EN: String!
  form3EN: String!
  ru: String!
}

input IrrverbOrderByInput {
  form1EN: OrderByArg
  form2EN: OrderByArg
  form3EN: OrderByArg
  id: OrderByArg
  ru: OrderByArg
}

input IrrverbUpdateInput {
  entities: EntityUpdateManyWithoutIrrverbInput
  form1EN: String
  form2EN: String
  form3EN: String
  id: Int
  ru: String
}

input IrrverbUpdateManyMutationInput {
  form1EN: String
  form2EN: String
  form3EN: String
  id: Int
  ru: String
}

input IrrverbUpdateOneWithoutEntitiesInput {
  connect: IrrverbWhereUniqueInput
  create: IrrverbCreateWithoutEntitiesInput
  delete: Boolean
  disconnect: Boolean
  update: IrrverbUpdateWithoutEntitiesDataInput
  upsert: IrrverbUpsertWithoutEntitiesInput
}

input IrrverbUpdateWithoutEntitiesDataInput {
  form1EN: String
  form2EN: String
  form3EN: String
  id: Int
  ru: String
}

input IrrverbUpsertWithoutEntitiesInput {
  create: IrrverbCreateWithoutEntitiesInput!
  update: IrrverbUpdateWithoutEntitiesDataInput!
}

input IrrverbWhereInput {
  AND: [IrrverbWhereInput!]
  entities: EntityFilter
  form1EN: StringFilter
  form2EN: StringFilter
  form3EN: StringFilter
  id: IntFilter
  NOT: [IrrverbWhereInput!]
  OR: [IrrverbWhereInput!]
  ru: StringFilter
}

input IrrverbWhereUniqueInput {
  id: Int
}

input LoginUserInput {
  email: String!
  password: String!
}

type MobileApp {
  createdAt: DateTime!
  id: Int!
  status: StatusMobile!
  url: String!
  version: String!
}

input MobileAppCreateInput {
  createdAt: DateTime
  status: StatusMobile
  url: String!
  version: String!
}

input MobileAppOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  status: OrderByArg
  url: OrderByArg
  version: OrderByArg
}

input MobileAppUpdateInput {
  createdAt: DateTime
  id: Int
  status: StatusMobile
  url: String
  version: String
}

input MobileAppUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  status: StatusMobile
  url: String
  version: String
}

input MobileAppWhereInput {
  AND: [MobileAppWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [MobileAppWhereInput!]
  OR: [MobileAppWhereInput!]
  status: StatusMobileFilter
  url: StringFilter
  version: StringFilter
}

input MobileAppWhereUniqueInput {
  id: Int
}

type Mutation {
  createEntity(data: EntityCreateInput!): Entity!
  createIrrverb(data: IrrverbCreateInput!): Irrverb!
  createMobileApp(data: MobileAppCreateInput!): MobileApp!
  createOrUpdateTranslate(data: CreateTranslateInput!): TranslateReturn!
  createOrUpdateWordWithTranslate(en: String!, entityId: Float!, translate: [String!]!, type: PartOfSpeech!): Word!
  createPartOfSpeechDesc(data: PartOfSpeechDescCreateInput!): PartOfSpeechDesc!
  createPhrase(data: PhraseCreateInput!): Phrase!
  createSentence(data: SentenceCreateInput!): Sentence!
  createSettingRole(data: SettingRoleCreateInput!): SettingRole!
  deleteEntity(where: EntityWhereUniqueInput!): Entity
  deleteIrrverb(where: IrrverbWhereUniqueInput!): Irrverb
  deleteManyEntity(where: EntityWhereInput): BatchPayload!
  deleteManyIrrverb(where: IrrverbWhereInput): BatchPayload!
  deleteManyMobileApp(where: MobileAppWhereInput): BatchPayload!
  deleteManyPartOfSpeechDesc(where: PartOfSpeechDescWhereInput): BatchPayload!
  deleteManyPhrase(where: PhraseWhereInput): BatchPayload!
  deleteManySentence(where: SentenceWhereInput): BatchPayload!
  deleteManySettingRole(where: SettingRoleWhereInput): BatchPayload!
  deleteManyTranslate(where: TranslateWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteManyWord(where: WordWhereInput): BatchPayload!
  deleteMobileApp(where: MobileAppWhereUniqueInput!): MobileApp
  deletePartOfSpeechDesc(where: PartOfSpeechDescWhereUniqueInput!): PartOfSpeechDesc
  deletePhrase(where: PhraseWhereUniqueInput!): Phrase
  deleteSentence(where: SentenceWhereUniqueInput!): Sentence
  deleteSettingRole(where: SettingRoleWhereUniqueInput!): SettingRole
  deleteTranslate(where: TranslateWhereUniqueInput!): Translate
  deleteUser(where: UserWhereUniqueInput!): User
  deleteWord(where: WordWhereUniqueInput!): Word
  getEntitiesByWord(word: String!): [Entity]!
  login(data: LoginUserInput!): UserReturn
  refreshUser: User!
  signup(data: UserSignUpInput!): UserReturn
  translatePhrase(entity: String!, phrase: String!): PhraseCustom!
  translateSentence(entity: String!, sentence: String!): SentenceCustom!
  translateWord(entity: String!, word: String!): TranslateWordReturn!
  updateEntity(data: EntityUpdateInput!, where: EntityWhereUniqueInput!): Entity
  updateIrrverb(data: IrrverbUpdateInput!, where: IrrverbWhereUniqueInput!): Irrverb
  updateManyEntity(data: EntityUpdateManyMutationInput!, where: EntityWhereInput): BatchPayload!
  updateManyIrrverb(data: IrrverbUpdateManyMutationInput!, where: IrrverbWhereInput): BatchPayload!
  updateManyMobileApp(data: MobileAppUpdateManyMutationInput!, where: MobileAppWhereInput): BatchPayload!
  updateManyPartOfSpeechDesc(data: PartOfSpeechDescUpdateManyMutationInput!, where: PartOfSpeechDescWhereInput): BatchPayload!
  updateManyPhrase(data: PhraseUpdateManyMutationInput!, where: PhraseWhereInput): BatchPayload!
  updateManySentence(data: SentenceUpdateManyMutationInput!, where: SentenceWhereInput): BatchPayload!
  updateManySettingRole(data: SettingRoleUpdateManyMutationInput!, where: SettingRoleWhereInput): BatchPayload!
  updateManyTranslate(data: TranslateUpdateManyMutationInput!, where: TranslateWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyWord(data: WordUpdateManyMutationInput!, where: WordWhereInput): BatchPayload!
  updateMobileApp(data: MobileAppUpdateInput!, where: MobileAppWhereUniqueInput!): MobileApp
  updatePartOfSpeechDesc(data: PartOfSpeechDescUpdateInput!, where: PartOfSpeechDescWhereUniqueInput!): PartOfSpeechDesc
  updatePhrase(data: PhraseUpdateInput!, where: PhraseWhereUniqueInput!): Phrase
  updatePhraseByEntity(data: UpdatePhrasesInput!): Boolean!
  updateSentence(data: SentenceUpdateInput!, where: SentenceWhereUniqueInput!): Sentence
  updateSentencesByEntity(data: UpdateSentencesInput!): Boolean!
  updateSettingRole(data: SettingRoleUpdateInput!, where: SettingRoleWhereUniqueInput!): SettingRole
  updateTranslate(data: TranslateUpdateInput!, where: TranslateWhereUniqueInput!): Translate
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateWord(data: WordUpdateInput!, where: WordWhereUniqueInput!): Word
  updateWordsByEntity(data: TranslateWordWithParseInput!): Boolean!
  upsertEntity(create: EntityCreateInput!, update: EntityUpdateInput!, where: EntityWhereUniqueInput!): Entity!
  upsertIrrverb(create: IrrverbCreateInput!, update: IrrverbUpdateInput!, where: IrrverbWhereUniqueInput!): Irrverb!
  upsertMobileApp(create: MobileAppCreateInput!, update: MobileAppUpdateInput!, where: MobileAppWhereUniqueInput!): MobileApp!
  upsertPartOfSpeechDesc(create: PartOfSpeechDescCreateInput!, update: PartOfSpeechDescUpdateInput!, where: PartOfSpeechDescWhereUniqueInput!): PartOfSpeechDesc!
  upsertPhrase(create: PhraseCreateInput!, update: PhraseUpdateInput!, where: PhraseWhereUniqueInput!): Phrase!
  upsertSentence(create: SentenceCreateInput!, update: SentenceUpdateInput!, where: SentenceWhereUniqueInput!): Sentence!
  upsertSettingRole(create: SettingRoleCreateInput!, update: SettingRoleUpdateInput!, where: SettingRoleWhereUniqueInput!): SettingRole!
  upsertTranslate(create: TranslateCreateInput!, update: TranslateUpdateInput!, where: TranslateWhereUniqueInput!): Translate!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertWord(create: WordCreateInput!, update: WordUpdateInput!, where: WordWhereUniqueInput!): Word!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

enum OrderByArg {
  asc
  desc
}

type OtherWord {
  disconnectTranslate: [String!]!
  en: String!
  translate: [Translation!]!
  type: PartOfSpeech!
}

input OtherWordInput {
  disconnectTranslate: [Float!]!
  id: Float!
  translate: [TranslationInput!]!
  type: PartOfSpeech!
}

enum PartOfSpeech {
  ADJ
  ADV
  CONJ
  DET
  MODAL
  NOUN
  OTHER
  PREP
  PRON
  VERB
}

type PartOfSpeechDesc {
  en: String!
  id: Int!
  ru: String!
  type: PartOfSpeech!
  ua: String!
}

input PartOfSpeechDescCreateInput {
  en: String!
  ru: String!
  type: PartOfSpeech!
  ua: String!
}

input PartOfSpeechDescOrderByInput {
  en: OrderByArg
  id: OrderByArg
  ru: OrderByArg
  type: OrderByArg
  ua: OrderByArg
}

input PartOfSpeechDescUpdateInput {
  en: String
  id: Int
  ru: String
  type: PartOfSpeech
  ua: String
}

input PartOfSpeechDescUpdateManyMutationInput {
  en: String
  id: Int
  ru: String
  type: PartOfSpeech
  ua: String
}

input PartOfSpeechDescWhereInput {
  AND: [PartOfSpeechDescWhereInput!]
  en: StringFilter
  id: IntFilter
  NOT: [PartOfSpeechDescWhereInput!]
  OR: [PartOfSpeechDescWhereInput!]
  ru: StringFilter
  type: PartOfSpeechFilter
  ua: StringFilter
}

input PartOfSpeechDescWhereUniqueInput {
  id: Int
}

input PartOfSpeechFilter {
  equals: PartOfSpeech
  in: [PartOfSpeech!]
  not: PartOfSpeech
  notIn: [PartOfSpeech!]
}

type Phrase {
  createdAt: DateTime!
  disconnectEntities(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): [Entity!]
  entities(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): [Entity!]
  id: Int!
  phrase: String!
  ru: String!
  updatedAt: DateTime!
}

input PhraseCreateInput {
  createdAt: DateTime
  disconnectEntities: EntityCreateManyWithoutDisconnectPhrasesInput
  entities: EntityCreateManyWithoutPhrasesInput
  phrase: String!
  ru: String!
  updatedAt: DateTime
}

input PhraseCreateManyWithoutDisconnectEntitiesInput {
  connect: [PhraseWhereUniqueInput!]
  create: [PhraseCreateWithoutDisconnectEntitiesInput!]
}

input PhraseCreateManyWithoutEntitiesInput {
  connect: [PhraseWhereUniqueInput!]
  create: [PhraseCreateWithoutEntitiesInput!]
}

input PhraseCreateWithoutDisconnectEntitiesInput {
  createdAt: DateTime
  entities: EntityCreateManyWithoutPhrasesInput
  phrase: String!
  ru: String!
  updatedAt: DateTime
}

input PhraseCreateWithoutEntitiesInput {
  createdAt: DateTime
  disconnectEntities: EntityCreateManyWithoutDisconnectPhrasesInput
  phrase: String!
  ru: String!
  updatedAt: DateTime
}

type PhraseCustom {
  phrase: String!
  ru: String!
}

input PhraseCustomInput {
  id: Float!
  phrase: String!
  ru: String!
}

input PhraseFilter {
  every: PhraseWhereInput
  none: PhraseWhereInput
  some: PhraseWhereInput
}

input PhraseOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  phrase: OrderByArg
  ru: OrderByArg
  updatedAt: OrderByArg
}

input PhraseScalarWhereInput {
  AND: [PhraseScalarWhereInput!]
  createdAt: DateTimeFilter
  disconnectEntities: EntityFilter
  entities: EntityFilter
  id: IntFilter
  NOT: [PhraseScalarWhereInput!]
  OR: [PhraseScalarWhereInput!]
  phrase: StringFilter
  ru: StringFilter
  updatedAt: DateTimeFilter
}

input PhraseUpdateInput {
  createdAt: DateTime
  disconnectEntities: EntityUpdateManyWithoutDisconnectPhrasesInput
  entities: EntityUpdateManyWithoutPhrasesInput
  id: Int
  phrase: String
  ru: String
  updatedAt: DateTime
}

input PhraseUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  phrase: String
  ru: String
  updatedAt: DateTime
}

input PhraseUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  phrase: String
  ru: String
  updatedAt: DateTime
}

input PhraseUpdateManyWithoutDisconnectEntitiesInput {
  connect: [PhraseWhereUniqueInput!]
  create: [PhraseCreateWithoutDisconnectEntitiesInput!]
  delete: [PhraseWhereUniqueInput!]
  deleteMany: [PhraseScalarWhereInput!]
  disconnect: [PhraseWhereUniqueInput!]
  set: [PhraseWhereUniqueInput!]
  update: [PhraseUpdateWithWhereUniqueWithoutDisconnectEntitiesInput!]
  updateMany: [PhraseUpdateManyWithWhereNestedInput!]
  upsert: [PhraseUpsertWithWhereUniqueWithoutDisconnectEntitiesInput!]
}

input PhraseUpdateManyWithoutEntitiesInput {
  connect: [PhraseWhereUniqueInput!]
  create: [PhraseCreateWithoutEntitiesInput!]
  delete: [PhraseWhereUniqueInput!]
  deleteMany: [PhraseScalarWhereInput!]
  disconnect: [PhraseWhereUniqueInput!]
  set: [PhraseWhereUniqueInput!]
  update: [PhraseUpdateWithWhereUniqueWithoutEntitiesInput!]
  updateMany: [PhraseUpdateManyWithWhereNestedInput!]
  upsert: [PhraseUpsertWithWhereUniqueWithoutEntitiesInput!]
}

input PhraseUpdateManyWithWhereNestedInput {
  data: PhraseUpdateManyDataInput!
  where: PhraseScalarWhereInput!
}

input PhraseUpdateWithoutDisconnectEntitiesDataInput {
  createdAt: DateTime
  entities: EntityUpdateManyWithoutPhrasesInput
  id: Int
  phrase: String
  ru: String
  updatedAt: DateTime
}

input PhraseUpdateWithoutEntitiesDataInput {
  createdAt: DateTime
  disconnectEntities: EntityUpdateManyWithoutDisconnectPhrasesInput
  id: Int
  phrase: String
  ru: String
  updatedAt: DateTime
}

input PhraseUpdateWithWhereUniqueWithoutDisconnectEntitiesInput {
  data: PhraseUpdateWithoutDisconnectEntitiesDataInput!
  where: PhraseWhereUniqueInput!
}

input PhraseUpdateWithWhereUniqueWithoutEntitiesInput {
  data: PhraseUpdateWithoutEntitiesDataInput!
  where: PhraseWhereUniqueInput!
}

input PhraseUpsertWithWhereUniqueWithoutDisconnectEntitiesInput {
  create: PhraseCreateWithoutDisconnectEntitiesInput!
  update: PhraseUpdateWithoutDisconnectEntitiesDataInput!
  where: PhraseWhereUniqueInput!
}

input PhraseUpsertWithWhereUniqueWithoutEntitiesInput {
  create: PhraseCreateWithoutEntitiesInput!
  update: PhraseUpdateWithoutEntitiesDataInput!
  where: PhraseWhereUniqueInput!
}

input PhraseWhereInput {
  AND: [PhraseWhereInput!]
  createdAt: DateTimeFilter
  disconnectEntities: EntityFilter
  entities: EntityFilter
  id: IntFilter
  NOT: [PhraseWhereInput!]
  OR: [PhraseWhereInput!]
  phrase: StringFilter
  ru: StringFilter
  updatedAt: DateTimeFilter
}

input PhraseWhereUniqueInput {
  id: Int
  phrase: String
}

type Query {
  aggregateEntity: AggregateEntity!
  aggregateIrrverb: AggregateIrrverb!
  aggregateMobileApp: AggregateMobileApp!
  aggregatePartOfSpeechDesc: AggregatePartOfSpeechDesc!
  aggregatePhrase: AggregatePhrase!
  aggregateSentence: AggregateSentence!
  aggregateSettingRole: AggregateSettingRole!
  aggregateTranslate: AggregateTranslate!
  aggregateUser: AggregateUser!
  aggregateWord: AggregateWord!
  entities(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): [Entity!]!
  entity(where: EntityWhereUniqueInput!): Entity
  getCountEntities: Float!
  irrverb(where: IrrverbWhereUniqueInput!): Irrverb
  irrverbs(after: IrrverbWhereUniqueInput, before: IrrverbWhereUniqueInput, first: Int, last: Int, orderBy: IrrverbOrderByInput, skip: Int, where: IrrverbWhereInput): [Irrverb!]!
  mobileApp(where: MobileAppWhereUniqueInput!): MobileApp
  mobileApps(after: MobileAppWhereUniqueInput, before: MobileAppWhereUniqueInput, first: Int, last: Int, orderBy: MobileAppOrderByInput, skip: Int, where: MobileAppWhereInput): [MobileApp!]!
  partOfSpeechDesc(where: PartOfSpeechDescWhereUniqueInput!): PartOfSpeechDesc
  partOfSpeechDescs(after: PartOfSpeechDescWhereUniqueInput, before: PartOfSpeechDescWhereUniqueInput, first: Int, last: Int, orderBy: PartOfSpeechDescOrderByInput, skip: Int, where: PartOfSpeechDescWhereInput): [PartOfSpeechDesc!]!
  phrase(where: PhraseWhereUniqueInput!): Phrase
  phrases(after: PhraseWhereUniqueInput, before: PhraseWhereUniqueInput, first: Int, last: Int, orderBy: PhraseOrderByInput, skip: Int, where: PhraseWhereInput): [Phrase!]!
  sentence(where: SentenceWhereUniqueInput!): Sentence
  sentences(after: SentenceWhereUniqueInput, before: SentenceWhereUniqueInput, first: Int, last: Int, orderBy: SentenceOrderByInput, skip: Int, where: SentenceWhereInput): [Sentence!]!
  settingRole(where: SettingRoleWhereUniqueInput!): SettingRole
  settingRoles(after: SettingRoleWhereUniqueInput, before: SettingRoleWhereUniqueInput, first: Int, last: Int, orderBy: SettingRoleOrderByInput, skip: Int, where: SettingRoleWhereInput): [SettingRole!]!
  translate(where: TranslateWhereUniqueInput!): Translate
  translates(after: TranslateWhereUniqueInput, before: TranslateWhereUniqueInput, first: Int, last: Int, orderBy: TranslateOrderByInput, skip: Int, where: TranslateWhereInput): [Translate!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  word(where: WordWhereUniqueInput!): Word
  words(after: WordWhereUniqueInput, before: WordWhereUniqueInput, first: Int, last: Int, orderBy: WordOrderByInput, skip: Int, where: WordWhereInput): [Word!]!
}

enum Role {
  ADMIN
  STANDARD
  SUPER
  TEST
}

input RoleFilter {
  equals: Role
  in: [Role!]
  not: Role
  notIn: [Role!]
}

type Sentence {
  createdAt: DateTime!
  disconnectEntities(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): [Entity!]
  entities(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): [Entity!]
  id: Int!
  ru: String!
  sentence: String!
  updatedAt: DateTime!
}

input SentenceCreateInput {
  createdAt: DateTime
  disconnectEntities: EntityCreateManyWithoutDisconnectSentencesInput
  entities: EntityCreateManyWithoutSentencesInput
  ru: String!
  sentence: String!
  updatedAt: DateTime
}

input SentenceCreateManyWithoutDisconnectEntitiesInput {
  connect: [SentenceWhereUniqueInput!]
  create: [SentenceCreateWithoutDisconnectEntitiesInput!]
}

input SentenceCreateManyWithoutEntitiesInput {
  connect: [SentenceWhereUniqueInput!]
  create: [SentenceCreateWithoutEntitiesInput!]
}

input SentenceCreateWithoutDisconnectEntitiesInput {
  createdAt: DateTime
  entities: EntityCreateManyWithoutSentencesInput
  ru: String!
  sentence: String!
  updatedAt: DateTime
}

input SentenceCreateWithoutEntitiesInput {
  createdAt: DateTime
  disconnectEntities: EntityCreateManyWithoutDisconnectSentencesInput
  ru: String!
  sentence: String!
  updatedAt: DateTime
}

type SentenceCustom {
  ru: String!
  sentence: String!
}

input SentenceCustomInput {
  id: Float!
  ru: String!
  sentence: String!
}

input SentenceFilter {
  every: SentenceWhereInput
  none: SentenceWhereInput
  some: SentenceWhereInput
}

input SentenceOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  ru: OrderByArg
  sentence: OrderByArg
  updatedAt: OrderByArg
}

input SentenceScalarWhereInput {
  AND: [SentenceScalarWhereInput!]
  createdAt: DateTimeFilter
  disconnectEntities: EntityFilter
  entities: EntityFilter
  id: IntFilter
  NOT: [SentenceScalarWhereInput!]
  OR: [SentenceScalarWhereInput!]
  ru: StringFilter
  sentence: StringFilter
  updatedAt: DateTimeFilter
}

input SentenceUpdateInput {
  createdAt: DateTime
  disconnectEntities: EntityUpdateManyWithoutDisconnectSentencesInput
  entities: EntityUpdateManyWithoutSentencesInput
  id: Int
  ru: String
  sentence: String
  updatedAt: DateTime
}

input SentenceUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  ru: String
  sentence: String
  updatedAt: DateTime
}

input SentenceUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  ru: String
  sentence: String
  updatedAt: DateTime
}

input SentenceUpdateManyWithoutDisconnectEntitiesInput {
  connect: [SentenceWhereUniqueInput!]
  create: [SentenceCreateWithoutDisconnectEntitiesInput!]
  delete: [SentenceWhereUniqueInput!]
  deleteMany: [SentenceScalarWhereInput!]
  disconnect: [SentenceWhereUniqueInput!]
  set: [SentenceWhereUniqueInput!]
  update: [SentenceUpdateWithWhereUniqueWithoutDisconnectEntitiesInput!]
  updateMany: [SentenceUpdateManyWithWhereNestedInput!]
  upsert: [SentenceUpsertWithWhereUniqueWithoutDisconnectEntitiesInput!]
}

input SentenceUpdateManyWithoutEntitiesInput {
  connect: [SentenceWhereUniqueInput!]
  create: [SentenceCreateWithoutEntitiesInput!]
  delete: [SentenceWhereUniqueInput!]
  deleteMany: [SentenceScalarWhereInput!]
  disconnect: [SentenceWhereUniqueInput!]
  set: [SentenceWhereUniqueInput!]
  update: [SentenceUpdateWithWhereUniqueWithoutEntitiesInput!]
  updateMany: [SentenceUpdateManyWithWhereNestedInput!]
  upsert: [SentenceUpsertWithWhereUniqueWithoutEntitiesInput!]
}

input SentenceUpdateManyWithWhereNestedInput {
  data: SentenceUpdateManyDataInput!
  where: SentenceScalarWhereInput!
}

input SentenceUpdateWithoutDisconnectEntitiesDataInput {
  createdAt: DateTime
  entities: EntityUpdateManyWithoutSentencesInput
  id: Int
  ru: String
  sentence: String
  updatedAt: DateTime
}

input SentenceUpdateWithoutEntitiesDataInput {
  createdAt: DateTime
  disconnectEntities: EntityUpdateManyWithoutDisconnectSentencesInput
  id: Int
  ru: String
  sentence: String
  updatedAt: DateTime
}

input SentenceUpdateWithWhereUniqueWithoutDisconnectEntitiesInput {
  data: SentenceUpdateWithoutDisconnectEntitiesDataInput!
  where: SentenceWhereUniqueInput!
}

input SentenceUpdateWithWhereUniqueWithoutEntitiesInput {
  data: SentenceUpdateWithoutEntitiesDataInput!
  where: SentenceWhereUniqueInput!
}

input SentenceUpsertWithWhereUniqueWithoutDisconnectEntitiesInput {
  create: SentenceCreateWithoutDisconnectEntitiesInput!
  update: SentenceUpdateWithoutDisconnectEntitiesDataInput!
  where: SentenceWhereUniqueInput!
}

input SentenceUpsertWithWhereUniqueWithoutEntitiesInput {
  create: SentenceCreateWithoutEntitiesInput!
  update: SentenceUpdateWithoutEntitiesDataInput!
  where: SentenceWhereUniqueInput!
}

input SentenceWhereInput {
  AND: [SentenceWhereInput!]
  createdAt: DateTimeFilter
  disconnectEntities: EntityFilter
  entities: EntityFilter
  id: IntFilter
  NOT: [SentenceWhereInput!]
  OR: [SentenceWhereInput!]
  ru: StringFilter
  sentence: StringFilter
  updatedAt: DateTimeFilter
}

input SentenceWhereUniqueInput {
  id: Int
  sentence: String
}

type SettingRole {
  id: Int!
  name: String!
  role: Role!
  value: String!
}

input SettingRoleCreateInput {
  name: String!
  role: Role!
  value: String!
}

input SettingRoleOrderByInput {
  id: OrderByArg
  name: OrderByArg
  role: OrderByArg
  value: OrderByArg
}

input SettingRoleUpdateInput {
  id: Int
  name: String
  role: Role
  value: String
}

input SettingRoleUpdateManyMutationInput {
  id: Int
  name: String
  role: Role
  value: String
}

input SettingRoleWhereInput {
  AND: [SettingRoleWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [SettingRoleWhereInput!]
  OR: [SettingRoleWhereInput!]
  role: RoleFilter
  value: StringFilter
}

input SettingRoleWhereUniqueInput {
  id: Int
}

enum StatusMobile {
  DEPRECATED
  WORK
}

input StatusMobileFilter {
  equals: StatusMobile
  in: [StatusMobile!]
  not: StatusMobile
  notIn: [StatusMobile!]
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Translate {
  createdAt: DateTime!
  disconnectWords(after: WordWhereUniqueInput, before: WordWhereUniqueInput, first: Int, last: Int, orderBy: WordOrderByInput, skip: Int, where: WordWhereInput): [Word!]
  id: Int!
  ru: String!
  type: PartOfSpeech!
  updatedAt: DateTime!
  words(after: WordWhereUniqueInput, before: WordWhereUniqueInput, first: Int, last: Int, orderBy: WordOrderByInput, skip: Int, where: WordWhereInput): [Word!]
}

input TranslateCreateInput {
  createdAt: DateTime
  disconnectWords: WordCreateManyWithoutDisconnectTranslateInput
  ru: String!
  type: PartOfSpeech
  updatedAt: DateTime
  words: WordCreateManyWithoutTranslateInput
}

input TranslateCreateManyWithoutDisconnectWordsInput {
  connect: [TranslateWhereUniqueInput!]
  create: [TranslateCreateWithoutDisconnectWordsInput!]
}

input TranslateCreateManyWithoutWordsInput {
  connect: [TranslateWhereUniqueInput!]
  create: [TranslateCreateWithoutWordsInput!]
}

input TranslateCreateWithoutDisconnectWordsInput {
  createdAt: DateTime
  ru: String!
  type: PartOfSpeech
  updatedAt: DateTime
  words: WordCreateManyWithoutTranslateInput
}

input TranslateCreateWithoutWordsInput {
  createdAt: DateTime
  disconnectWords: WordCreateManyWithoutDisconnectTranslateInput
  ru: String!
  type: PartOfSpeech
  updatedAt: DateTime
}

input TranslateFilter {
  every: TranslateWhereInput
  none: TranslateWhereInput
  some: TranslateWhereInput
}

input TranslateOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  ru: OrderByArg
  type: OrderByArg
  updatedAt: OrderByArg
}

type TranslateReturn {
  id: Float!
  ru: String!
  type: PartOfSpeech!
}

input TranslateScalarWhereInput {
  AND: [TranslateScalarWhereInput!]
  createdAt: DateTimeFilter
  disconnectWords: WordFilter
  id: IntFilter
  NOT: [TranslateScalarWhereInput!]
  OR: [TranslateScalarWhereInput!]
  ru: StringFilter
  type: PartOfSpeechFilter
  updatedAt: DateTimeFilter
  words: WordFilter
}

input TranslateUpdateInput {
  createdAt: DateTime
  disconnectWords: WordUpdateManyWithoutDisconnectTranslateInput
  id: Int
  ru: String
  type: PartOfSpeech
  updatedAt: DateTime
  words: WordUpdateManyWithoutTranslateInput
}

input TranslateUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  ru: String
  type: PartOfSpeech
  updatedAt: DateTime
}

input TranslateUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  ru: String
  type: PartOfSpeech
  updatedAt: DateTime
}

input TranslateUpdateManyWithoutDisconnectWordsInput {
  connect: [TranslateWhereUniqueInput!]
  create: [TranslateCreateWithoutDisconnectWordsInput!]
  delete: [TranslateWhereUniqueInput!]
  deleteMany: [TranslateScalarWhereInput!]
  disconnect: [TranslateWhereUniqueInput!]
  set: [TranslateWhereUniqueInput!]
  update: [TranslateUpdateWithWhereUniqueWithoutDisconnectWordsInput!]
  updateMany: [TranslateUpdateManyWithWhereNestedInput!]
  upsert: [TranslateUpsertWithWhereUniqueWithoutDisconnectWordsInput!]
}

input TranslateUpdateManyWithoutWordsInput {
  connect: [TranslateWhereUniqueInput!]
  create: [TranslateCreateWithoutWordsInput!]
  delete: [TranslateWhereUniqueInput!]
  deleteMany: [TranslateScalarWhereInput!]
  disconnect: [TranslateWhereUniqueInput!]
  set: [TranslateWhereUniqueInput!]
  update: [TranslateUpdateWithWhereUniqueWithoutWordsInput!]
  updateMany: [TranslateUpdateManyWithWhereNestedInput!]
  upsert: [TranslateUpsertWithWhereUniqueWithoutWordsInput!]
}

input TranslateUpdateManyWithWhereNestedInput {
  data: TranslateUpdateManyDataInput!
  where: TranslateScalarWhereInput!
}

input TranslateUpdateWithoutDisconnectWordsDataInput {
  createdAt: DateTime
  id: Int
  ru: String
  type: PartOfSpeech
  updatedAt: DateTime
  words: WordUpdateManyWithoutTranslateInput
}

input TranslateUpdateWithoutWordsDataInput {
  createdAt: DateTime
  disconnectWords: WordUpdateManyWithoutDisconnectTranslateInput
  id: Int
  ru: String
  type: PartOfSpeech
  updatedAt: DateTime
}

input TranslateUpdateWithWhereUniqueWithoutDisconnectWordsInput {
  data: TranslateUpdateWithoutDisconnectWordsDataInput!
  where: TranslateWhereUniqueInput!
}

input TranslateUpdateWithWhereUniqueWithoutWordsInput {
  data: TranslateUpdateWithoutWordsDataInput!
  where: TranslateWhereUniqueInput!
}

input TranslateUpsertWithWhereUniqueWithoutDisconnectWordsInput {
  create: TranslateCreateWithoutDisconnectWordsInput!
  update: TranslateUpdateWithoutDisconnectWordsDataInput!
  where: TranslateWhereUniqueInput!
}

input TranslateUpsertWithWhereUniqueWithoutWordsInput {
  create: TranslateCreateWithoutWordsInput!
  update: TranslateUpdateWithoutWordsDataInput!
  where: TranslateWhereUniqueInput!
}

input TranslateWhereInput {
  AND: [TranslateWhereInput!]
  createdAt: DateTimeFilter
  disconnectWords: WordFilter
  id: IntFilter
  NOT: [TranslateWhereInput!]
  OR: [TranslateWhereInput!]
  ru: StringFilter
  type: PartOfSpeechFilter
  updatedAt: DateTimeFilter
  words: WordFilter
}

input TranslateWhereUniqueInput {
  id: Int
  ru: String
}

type TranslateWordReturn {
  translate: [Translation!]!
  type: PartOfSpeech!
}

input TranslateWordWithParseInput {
  disconnectWords: [Float!]!
  entityId: Float!
  words: [OtherWordInput!]!
}

type TranslateWordWithParseReturn {
  backTranslations: [String!]!
  disconnectWords: [String!]!
  irrverb: Irrverb
  phrases: [PhraseCustom!]!
  sentences: [SentenceCustom!]!
  title: String!
  words: [OtherWord!]!
}

type Translation {
  ru: String!
  type: PartOfSpeech!
}

input TranslationInput {
  id: Float!
  ru: String!
  type: PartOfSpeech!
}

input Unique_title_userIdCompoundUniqueInput {
  title: String!
  userId: Int!
}

input UpdatePhrasesInput {
  disconnectPhrases: [Float!]!
  entityId: Float!
  phrases: [PhraseCustomInput!]!
}

input UpdateSentencesInput {
  disconnectSentences: [Float!]!
  entityId: Float!
  sentences: [SentenceCustomInput!]!
}

type User {
  countQuery: Int!
  email: String!
  entities(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): [Entity!]
  id: Int!
  lastName: String!
  name: String!
  role: Role!
  Word(after: WordWhereUniqueInput, before: WordWhereUniqueInput, first: Int, last: Int, orderBy: WordOrderByInput, skip: Int, where: WordWhereInput): [Word!]
}

input UserCreateInput {
  countQuery: Int
  email: String
  entities: EntityCreateManyWithoutUserInput
  lastName: String
  name: String
  password: String
  role: Role
  Word: WordCreateManyWithoutUserInput
}

input UserCreateOneWithoutEntitiesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutEntitiesInput
}

input UserCreateOneWithoutWordInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWordInput
}

input UserCreateWithoutEntitiesInput {
  countQuery: Int
  createdAt: DateTime
  email: String
  lastName: String
  name: String
  password: String
  role: Role
  Word: WordCreateManyWithoutUserInput
}

input UserCreateWithoutWordInput {
  countQuery: Int
  createdAt: DateTime
  email: String
  entities: EntityCreateManyWithoutUserInput
  lastName: String
  name: String
  password: String
  role: Role
}

input UserOrderByInput {
  countQuery: OrderByArg
  email: OrderByArg
  id: OrderByArg
  lastName: OrderByArg
  name: OrderByArg
  role: OrderByArg
}

type UserReturn {
  token: String!
  user: User!
}

input UserSignUpInput {
  email: String!
  lastName: String!
  name: String!
  password: String!
  repeatPassword: String!
}

input UserUpdateInput {
  countQuery: Int
  email: String
  entities: EntityUpdateManyWithoutUserInput
  id: Int
  lastName: String
  name: String
  role: Role
  Word: WordUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  countQuery: Int
  email: String
  id: Int
  lastName: String
  name: String
  role: Role
}

input UserUpdateOneRequiredWithoutEntitiesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutEntitiesInput
  update: UserUpdateWithoutEntitiesDataInput
  upsert: UserUpsertWithoutEntitiesInput
}

input UserUpdateOneRequiredWithoutWordInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWordInput
  update: UserUpdateWithoutWordDataInput
  upsert: UserUpsertWithoutWordInput
}

input UserUpdateWithoutEntitiesDataInput {
  countQuery: Int
  createdAt: DateTime
  email: String
  id: Int
  lastName: String
  name: String
  password: String
  role: Role
  Word: WordUpdateManyWithoutUserInput
}

input UserUpdateWithoutWordDataInput {
  countQuery: Int
  createdAt: DateTime
  email: String
  entities: EntityUpdateManyWithoutUserInput
  id: Int
  lastName: String
  name: String
  password: String
  role: Role
}

input UserUpsertWithoutEntitiesInput {
  create: UserCreateWithoutEntitiesInput!
  update: UserUpdateWithoutEntitiesDataInput!
}

input UserUpsertWithoutWordInput {
  create: UserCreateWithoutWordInput!
  update: UserUpdateWithoutWordDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  countQuery: IntFilter
  email: StringFilter
  entities: EntityFilter
  id: IntFilter
  lastName: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  role: RoleFilter
  Word: WordFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Word {
  createdAt: DateTime!
  disconnectEntities(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): [Entity!]
  disconnectTranslate(after: TranslateWhereUniqueInput, before: TranslateWhereUniqueInput, first: Int, last: Int, orderBy: TranslateOrderByInput, skip: Int, where: TranslateWhereInput): [Translate!]
  en: String!
  entities(after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int, orderBy: EntityOrderByInput, skip: Int, where: EntityWhereInput): [Entity!]
  id: Int!
  translate(after: TranslateWhereUniqueInput, before: TranslateWhereUniqueInput, first: Int, last: Int, orderBy: TranslateOrderByInput, skip: Int, where: TranslateWhereInput): [Translate!]
  type: PartOfSpeech!
  updatedAt: DateTime!
  User: User!
  userId: Int!
}

input WordCreateInput {
  createdAt: DateTime
  disconnectEntities: EntityCreateManyWithoutDisconnectWordsInput
  disconnectTranslate: TranslateCreateManyWithoutDisconnectWordsInput
  en: String!
  entities: EntityCreateManyWithoutWordsInput
  translate: TranslateCreateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserCreateOneWithoutWordInput!
}

input WordCreateManyWithoutDisconnectEntitiesInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutDisconnectEntitiesInput!]
}

input WordCreateManyWithoutDisconnectTranslateInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutDisconnectTranslateInput!]
}

input WordCreateManyWithoutEntitiesInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutEntitiesInput!]
}

input WordCreateManyWithoutTranslateInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutTranslateInput!]
}

input WordCreateManyWithoutUserInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutUserInput!]
}

input WordCreateWithoutDisconnectEntitiesInput {
  createdAt: DateTime
  disconnectTranslate: TranslateCreateManyWithoutDisconnectWordsInput
  en: String!
  entities: EntityCreateManyWithoutWordsInput
  translate: TranslateCreateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserCreateOneWithoutWordInput!
}

input WordCreateWithoutDisconnectTranslateInput {
  createdAt: DateTime
  disconnectEntities: EntityCreateManyWithoutDisconnectWordsInput
  en: String!
  entities: EntityCreateManyWithoutWordsInput
  translate: TranslateCreateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserCreateOneWithoutWordInput!
}

input WordCreateWithoutEntitiesInput {
  createdAt: DateTime
  disconnectEntities: EntityCreateManyWithoutDisconnectWordsInput
  disconnectTranslate: TranslateCreateManyWithoutDisconnectWordsInput
  en: String!
  translate: TranslateCreateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserCreateOneWithoutWordInput!
}

input WordCreateWithoutTranslateInput {
  createdAt: DateTime
  disconnectEntities: EntityCreateManyWithoutDisconnectWordsInput
  disconnectTranslate: TranslateCreateManyWithoutDisconnectWordsInput
  en: String!
  entities: EntityCreateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserCreateOneWithoutWordInput!
}

input WordCreateWithoutUserInput {
  createdAt: DateTime
  disconnectEntities: EntityCreateManyWithoutDisconnectWordsInput
  disconnectTranslate: TranslateCreateManyWithoutDisconnectWordsInput
  en: String!
  entities: EntityCreateManyWithoutWordsInput
  translate: TranslateCreateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
}

input WordFilter {
  every: WordWhereInput
  none: WordWhereInput
  some: WordWhereInput
}

input WordOrderByInput {
  createdAt: OrderByArg
  en: OrderByArg
  id: OrderByArg
  type: OrderByArg
  updatedAt: OrderByArg
  userId: OrderByArg
}

input WordScalarWhereInput {
  AND: [WordScalarWhereInput!]
  createdAt: DateTimeFilter
  disconnectEntities: EntityFilter
  disconnectTranslate: TranslateFilter
  en: StringFilter
  entities: EntityFilter
  id: IntFilter
  NOT: [WordScalarWhereInput!]
  OR: [WordScalarWhereInput!]
  translate: TranslateFilter
  type: PartOfSpeechFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input WordUpdateInput {
  createdAt: DateTime
  disconnectEntities: EntityUpdateManyWithoutDisconnectWordsInput
  disconnectTranslate: TranslateUpdateManyWithoutDisconnectWordsInput
  en: String
  entities: EntityUpdateManyWithoutWordsInput
  id: Int
  translate: TranslateUpdateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutWordInput
}

input WordUpdateManyDataInput {
  createdAt: DateTime
  en: String
  id: Int
  type: PartOfSpeech
  updatedAt: DateTime
}

input WordUpdateManyMutationInput {
  createdAt: DateTime
  en: String
  id: Int
  type: PartOfSpeech
  updatedAt: DateTime
}

input WordUpdateManyWithoutDisconnectEntitiesInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutDisconnectEntitiesInput!]
  delete: [WordWhereUniqueInput!]
  deleteMany: [WordScalarWhereInput!]
  disconnect: [WordWhereUniqueInput!]
  set: [WordWhereUniqueInput!]
  update: [WordUpdateWithWhereUniqueWithoutDisconnectEntitiesInput!]
  updateMany: [WordUpdateManyWithWhereNestedInput!]
  upsert: [WordUpsertWithWhereUniqueWithoutDisconnectEntitiesInput!]
}

input WordUpdateManyWithoutDisconnectTranslateInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutDisconnectTranslateInput!]
  delete: [WordWhereUniqueInput!]
  deleteMany: [WordScalarWhereInput!]
  disconnect: [WordWhereUniqueInput!]
  set: [WordWhereUniqueInput!]
  update: [WordUpdateWithWhereUniqueWithoutDisconnectTranslateInput!]
  updateMany: [WordUpdateManyWithWhereNestedInput!]
  upsert: [WordUpsertWithWhereUniqueWithoutDisconnectTranslateInput!]
}

input WordUpdateManyWithoutEntitiesInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutEntitiesInput!]
  delete: [WordWhereUniqueInput!]
  deleteMany: [WordScalarWhereInput!]
  disconnect: [WordWhereUniqueInput!]
  set: [WordWhereUniqueInput!]
  update: [WordUpdateWithWhereUniqueWithoutEntitiesInput!]
  updateMany: [WordUpdateManyWithWhereNestedInput!]
  upsert: [WordUpsertWithWhereUniqueWithoutEntitiesInput!]
}

input WordUpdateManyWithoutTranslateInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutTranslateInput!]
  delete: [WordWhereUniqueInput!]
  deleteMany: [WordScalarWhereInput!]
  disconnect: [WordWhereUniqueInput!]
  set: [WordWhereUniqueInput!]
  update: [WordUpdateWithWhereUniqueWithoutTranslateInput!]
  updateMany: [WordUpdateManyWithWhereNestedInput!]
  upsert: [WordUpsertWithWhereUniqueWithoutTranslateInput!]
}

input WordUpdateManyWithoutUserInput {
  connect: [WordWhereUniqueInput!]
  create: [WordCreateWithoutUserInput!]
  delete: [WordWhereUniqueInput!]
  deleteMany: [WordScalarWhereInput!]
  disconnect: [WordWhereUniqueInput!]
  set: [WordWhereUniqueInput!]
  update: [WordUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [WordUpdateManyWithWhereNestedInput!]
  upsert: [WordUpsertWithWhereUniqueWithoutUserInput!]
}

input WordUpdateManyWithWhereNestedInput {
  data: WordUpdateManyDataInput!
  where: WordScalarWhereInput!
}

input WordUpdateWithoutDisconnectEntitiesDataInput {
  createdAt: DateTime
  disconnectTranslate: TranslateUpdateManyWithoutDisconnectWordsInput
  en: String
  entities: EntityUpdateManyWithoutWordsInput
  id: Int
  translate: TranslateUpdateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutWordInput
}

input WordUpdateWithoutDisconnectTranslateDataInput {
  createdAt: DateTime
  disconnectEntities: EntityUpdateManyWithoutDisconnectWordsInput
  en: String
  entities: EntityUpdateManyWithoutWordsInput
  id: Int
  translate: TranslateUpdateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutWordInput
}

input WordUpdateWithoutEntitiesDataInput {
  createdAt: DateTime
  disconnectEntities: EntityUpdateManyWithoutDisconnectWordsInput
  disconnectTranslate: TranslateUpdateManyWithoutDisconnectWordsInput
  en: String
  id: Int
  translate: TranslateUpdateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutWordInput
}

input WordUpdateWithoutTranslateDataInput {
  createdAt: DateTime
  disconnectEntities: EntityUpdateManyWithoutDisconnectWordsInput
  disconnectTranslate: TranslateUpdateManyWithoutDisconnectWordsInput
  en: String
  entities: EntityUpdateManyWithoutWordsInput
  id: Int
  type: PartOfSpeech
  updatedAt: DateTime
  User: UserUpdateOneRequiredWithoutWordInput
}

input WordUpdateWithoutUserDataInput {
  createdAt: DateTime
  disconnectEntities: EntityUpdateManyWithoutDisconnectWordsInput
  disconnectTranslate: TranslateUpdateManyWithoutDisconnectWordsInput
  en: String
  entities: EntityUpdateManyWithoutWordsInput
  id: Int
  translate: TranslateUpdateManyWithoutWordsInput
  type: PartOfSpeech
  updatedAt: DateTime
}

input WordUpdateWithWhereUniqueWithoutDisconnectEntitiesInput {
  data: WordUpdateWithoutDisconnectEntitiesDataInput!
  where: WordWhereUniqueInput!
}

input WordUpdateWithWhereUniqueWithoutDisconnectTranslateInput {
  data: WordUpdateWithoutDisconnectTranslateDataInput!
  where: WordWhereUniqueInput!
}

input WordUpdateWithWhereUniqueWithoutEntitiesInput {
  data: WordUpdateWithoutEntitiesDataInput!
  where: WordWhereUniqueInput!
}

input WordUpdateWithWhereUniqueWithoutTranslateInput {
  data: WordUpdateWithoutTranslateDataInput!
  where: WordWhereUniqueInput!
}

input WordUpdateWithWhereUniqueWithoutUserInput {
  data: WordUpdateWithoutUserDataInput!
  where: WordWhereUniqueInput!
}

input WordUpsertWithWhereUniqueWithoutDisconnectEntitiesInput {
  create: WordCreateWithoutDisconnectEntitiesInput!
  update: WordUpdateWithoutDisconnectEntitiesDataInput!
  where: WordWhereUniqueInput!
}

input WordUpsertWithWhereUniqueWithoutDisconnectTranslateInput {
  create: WordCreateWithoutDisconnectTranslateInput!
  update: WordUpdateWithoutDisconnectTranslateDataInput!
  where: WordWhereUniqueInput!
}

input WordUpsertWithWhereUniqueWithoutEntitiesInput {
  create: WordCreateWithoutEntitiesInput!
  update: WordUpdateWithoutEntitiesDataInput!
  where: WordWhereUniqueInput!
}

input WordUpsertWithWhereUniqueWithoutTranslateInput {
  create: WordCreateWithoutTranslateInput!
  update: WordUpdateWithoutTranslateDataInput!
  where: WordWhereUniqueInput!
}

input WordUpsertWithWhereUniqueWithoutUserInput {
  create: WordCreateWithoutUserInput!
  update: WordUpdateWithoutUserDataInput!
  where: WordWhereUniqueInput!
}

input WordWhereInput {
  AND: [WordWhereInput!]
  createdAt: DateTimeFilter
  disconnectEntities: EntityFilter
  disconnectTranslate: TranslateFilter
  en: StringFilter
  entities: EntityFilter
  id: IntFilter
  NOT: [WordWhereInput!]
  OR: [WordWhereInput!]
  translate: TranslateFilter
  type: PartOfSpeechFilter
  updatedAt: DateTimeFilter
  User: UserWhereInput
  userId: IntFilter
}

input WordWhereUniqueInput {
  AnotherUser_firstname_lastname_key: AnotherUser_firstname_lastname_keyCompoundUniqueInput
  id: Int
}
